apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ name }}
  labels:
    app: "{{ name }}"
spec:
  serviceName: {{ name }}-headless
  selector:
    matchLabels:
      app: "{{ name }}"
  replicas: {{ replicas }}
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: {{ name }}-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  template:
    metadata:
      name: "{{ name }}"
      labels:
        app: "{{ name }}"
      annotations:
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      affinity: {% if affinity is not defined %}{}{% else %}
        {{ affinity | indent(8) }}
      {% endif %}
      terminationGracePeriodSeconds: 120
      volumes:
      - name: geoip
        emptyDir: {}
      - name: {{ name }}-config
        configMap:
          name: {{ name }}-logstash-operator-config
      - name: {{ name }}-pipelines
        configMap:
          name: {{ name }}-logstash-operator-pipelines
      {% for item in pipelines %}
      - name: {{ name }}-pipeline-{{ item }}
        configMap:
          name: {{ item }}
      {% endfor %}
      containers:
      - name: "logstash"
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
        image: "{{ image }}"
        args: ["--config.reload.automatic"] 
        #TODO: variable during deployment of operator -> should be chart.appversion, also moved from 8 to 7.xx due to latest stable release
        imagePullPolicy: "IfNotPresent"
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 300
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 3
          timeoutSeconds: 5
        ports:
        - name: http
          containerPort: 9600
        {% for name,port in ports.items() %}
        - name: {{ name }}
          containerPort: {{ port }}
        {% endfor %}
        resources:
          limits:
            cpu: 1000m
            memory: 1536Mi
          requests:
            cpu: 100m
            memory: 1536Mi
        env:
          - name: LS_JAVA_OPTS
            value: "-Xmx1g -Xms1g"
        volumeMounts:
          - name: "{{ name }}-data"
            mountPath: /usr/share/logstash/data
          - name: "{{ name }}-config"
            mountPath: /opt/logstash/config/logstash.yml
            subPath: logstash.yml
          - name: "{{ name }}-pipelines"
            mountPath: /opt/logstash/config/pipelines.yml
            subPath: pipelines.yml
          {% for item in pipelines %}
          - name: "{{ name }}-pipeline-{{ item }}"
            mountPath: /opt/logstash/pipeline-{{ item }}
          {% endfor %}
          {% if geoip is defined %}
          - mountPath: {{ geoip['mountPath'] }}
            name: geoip      
          {% endif %}
      {% if geoip is defined %}
      - name: "geoip-update"
        image: {{ geoip['image'] }}
        imagePullPolicy: IfNotPresent
        env:
        - name: GEOIPUPDATE_DB_DIR
          value: {{ geoip['mountPath'] }}
        - name: GEOIPUPDATE_CONF_FILE
          value: {{ geoip['mountPath'] }}/GeoIP.conf
        - name: GEOIPUPDATE_ACCOUNT_ID
          valueFrom:
            secretKeyRef:
              name: {{ geoip['configSecret'] }}
              key: GEOIPUPDATE_ACCOUNT_ID
        - name: GEOIPUPDATE_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              name: {{ geoip['configSecret'] }}
              key: GEOIPUPDATE_LICENSE_KEY
        - name: GEOIPUPDATE_EDITION_IDS
          valueFrom:
            secretKeyRef:
              name: {{ geoip['configSecret'] }}
              key: GEOIPUPDATE_EDITION_IDS
        - name: GEOIPUPDATE_FREQUENCY
          valueFrom:
            secretKeyRef:
              name: {{ geoip['configSecret'] }}
              key: GEOIPUPDATE_FREQUENCY
        volumeMounts:
        - mountPath: {{ geoip['mountPath'] }}
          name: geoip
      {% endif %}
